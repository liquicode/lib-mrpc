[
	{
		"type": "home",
		"project_name": "@liquicode/lib-datatable",
		"project_version": "0.0.1",
		"project_sourcecode": "https://github.com/liquicode/lib-datatable.git",
		"project_homepage": "http://lib-datatable.liquicode.com",
		"description": "\n# lib-datatable\n\nA NodeJS library to manipulate an in memory table (array of arrays).\n\nUse the library to create a `Datatable` object.\nWith a `Datatable` you can maniuplate a two dimesional array of data.\nYou can add and remove columns, get and set individual cell values, and convert to and from an array of objects.\n\nInternally, all data is stored as an array of rows.\nEach row stores an array of cell values.\nCell values can be of any nativa data type (e.g. number, string) or a complex object.\n\n`Datatable` objects maintain an array of column headings (`data.column_headings`).\nColumn headings are not required for any functions but are used when converting a `Datatable` to and from an array of objects.\nDuring the conversion process, each `Datatable` column corresponds to a field within the object.\n\n\n---------------------------------------------------------------------\n\n\n## Getting Started\n\nInstall via NPM:\n```bash\nnpm install @liquicode/lib-datatable\n```\n\n\n---------------------------------------------------------------------\n\n\n## Usage\n\n### Include the Datatable library in your source code\n```javascript\nlet Datatable = require( '@liquicode/lib-datatable' );\n```\n\n### Use the library to create a Datatable Object\n```javascript\nlet table = Datatable.NewDatable();\t\t// Create an empty table with no rows or columns.\nlet table = Datatable.FromMatrix( M );\t// Create a table from an array of arrays.\nlet table = Datatable.FromObjects( O );\t// Create a table from an array of objects.\n```\n\n### Creating Rows and Columns\n```javascript\ntable.InsertBlankColumns( 5 );\t\t// Add 5 columns to the beginning.\ntable.InsertBlankColumns( 5, 0 );\t// Add 5 columns to the beginning.\ntable.InsertBlankColumns( 5, -1 );\t// Add 5 columns to the end.\ntable.InsertBlankRows( 5 );\t\t\t// Add 5 rows to the beginning.\ntable.InsertBlankRows( 5, 0 );\t\t// Add 5 rows to the beginning.\ntable.InsertBlankRows( 5, -1 );\t\t// Add 5 rows to the end.\ntable.SetValue( '', 99, 99 );\t\t// Extend the table to 100 rows and 100 columns.\n```\n\n### Deleting Rows and Columns\n```javascript\ntable.DeleteColumns( 1, -1 );\t// Delete the last column.\ntable.DeleteRows( 1, 0 );\t\t// Delete the first row.\ntable.DeleteColumns();\t\t\t// Delete all columns.\ntable.DeleteRows();\t\t\t\t// Delete all rows.\n```\n\n### Getting Cell Values\n```javascript\ntable.GetValue();\t\t\t\t// Get the value at the first row and column.\ntable.GetValue( 0 );\t\t\t// Get the value at the first row and column.\ntable.GetValue( 0, 0 );\t\t\t// Get the value at the first row and column.\ntable.GetValue( 1, 1 );\t\t\t// Get the value at the second row and column.\ntable.GetValue( -1, -1 );\t\t// Get the value at the last row and column.\n```\n\n### Setting Cell Values\n```javascript\ntable.SetValue( 'home' );\t\t\t// Set the value at the first row and column.\ntable.SetValue( 'home', 0 );\t\t// Set the value at the first row and column.\ntable.SetValue( 'home', 0, 0 );\t\t// Set the value at the first row and column.\ntable.SetValue( 'start', 1, 1 );\t// Set the value at the second row and column.\ntable.SetValue( 'end', -1, -1 );\t// Set the value at the last row and column.\n```\n\n\n---------------------------------------------------------------------\n\n\n## Techniques\n\n### Creating a table from an array of arrays\n```javascript\nlet matrix = \n[\n\t[ 1, 2, 3 ],\n\t[ 4, 5, 6 ],\n\t[ 7, 8, 9 ]\n];\nlet table = Datatable.FromMatrix( matrix );\n// or\nlet table = Datatable.NewDatatable();\ntable.InsertRows( matrix );\n```\n`table` now looks like:\n```\n   |   | \n---+---+----\n 1 | 2 | 3\n 4 | 5 | 6\n 7 | 8 | 9\n```\n\n### Creating a table from an array of objects\n```javascript\nlet objects = \n[\n\t{ name: \"Alice\", age: 26, sport: \"soccer\" },\n\t{ name: \"Bob\", age: 28, sport: \"hockey\" },\n\t{ name: \"Eve\", age: 23, sport: \"swimming\" }\n];\nlet table = Datatable.FromObjects( objects );\n// or\nlet table = Datatable.NewDatatable();\ntable.InsertObjects( objects );\n```\n`table` now looks like:\n```\nname  | age | sport\n------+-----+-------\nAlice | 26  | soccer\nBob   | 28  | hockey\nEve   | 23  | swimming\n```\n\n### Creating a subtable from an existing table\n```javascript\nlet objects = \n[\n\t{ name: \"Alice\", age: 26, sport: \"soccer\" },\n\t{ name: \"Bob\", age: 28, sport: \"hockey\" },\n\t{ name: \"Eve\", age: 23, sport: \"swimming\" }\n];\nlet table = Datatable.FromObjects( objects );\nlet matrix = table.GetMatrix( 0, 0, 1, -1 ); // get first two full rows.\nlet subtable = Datatable.FromMatrix( matrix );\n```\n`table` now looks like:\n```\n      |     | \n------+-----+-------\nAlice | 26  | soccer\nBob   | 28  | hockey\n```\n\n\n---------------------------------------------------------------------\n\n\n## TODO:\n\n- Cell addressing: `C4` or `3, 4` or `{ r:4, c:3 }`\n- Cell ranges: `A1-C5` or `A1:C5` or `A` or `A:C`\n\n"
	},
	{
		"category": "Cell Values",
		"type": "category",
		"description": "\n\t\tFunctions to inspect and manipulate the cells of a Datatable.\n\t\t"
	},
	{
		"category": "Cell Values",
		"type": "function",
		"name": "GetValue( AtRow, AtColumn )",
		"parameters": [
			{
				"name": "AtRow",
				"type": "number",
				"reqd": false,
				"desc": "The row index to locate."
			},
			{
				"name": "AtColumn",
				"type": "number",
				"reqd": false,
				"desc": "The column index to locate."
			}
		],
		"returns": [
			{
				"name": "Value",
				"type": "any",
				"desc": "The value stored at the given location."
			}
		],
		"description": "\n\t\t\tGets the value stored at a specific row and column index.\n\t\t\tIf AtRow or AtColumn are negative, then the value will be located from the end of the rows or columns. \n\t\t\tIf AtRow or AtColumn are greater than the number of the rows or columns, then a blank value will be returned (options.blank_value). \n\t\t\t",
		"invocations": [
			{
				"code": "GetValue()",
				"desc": "Gets the value at the first row and column."
			},
			{
				"code": "GetValue( 0 )",
				"desc": "Gets the value at the first row and column."
			},
			{
				"code": "GetValue( 0, 0)",
				"desc": "Gets the value at the first row and column."
			},
			{
				"code": "GetValue( 1, 1)",
				"desc": "Gets the value at the second row and column."
			},
			{
				"code": "GetValue( -1, -1)",
				"desc": "Gets the value at the last row and column."
			},
			{
				"code": "GetValue( -2, -2)",
				"desc": "Gets the value at the second to last row and column."
			},
			{
				"code": "GetValue( 99, 99)",
				"desc": "Getting the value of a nonexistent cell returns options.blank_value."
			}
		]
	},
	{
		"category": "Cell Values",
		"type": "function",
		"name": "SetValue( Value, AtRow, AtColumn )",
		"parameters": [
			{
				"name": "Value",
				"type": "number",
				"reqd": false,
				"desc": "The value to set."
			},
			{
				"name": "AtRow",
				"type": "number",
				"reqd": false,
				"desc": "The row index to locate."
			},
			{
				"name": "AtColumn",
				"type": "number",
				"reqd": false,
				"desc": "The column index to locate."
			}
		],
		"description": "\n\t\tSets the value at a specific row and column index within the table.\n\t\tIf AtRow or AtColumn are negative, then the value will be located from the end of the rows or columns. \n\t\tIf AtRow or AtColumn are greater than the number of the rows or columns, then the table will be extended to include the location. \n\t\t",
		"invocations": [
			{
				"code": "SetValue()",
				"desc": "Sets a blank value at the first row and column."
			},
			{
				"code": "SetValue( 'Hello' )",
				"desc": "Sets the value at the first row and column."
			},
			{
				"code": "SetValue( 'Hello', 0 )",
				"desc": "Sets the value at the first row and column."
			},
			{
				"code": "SetValue( 'Hello', 0, 0)",
				"desc": "Sets the value at the first row and column."
			},
			{
				"code": "SetValue( 'Hello', 1, 1)",
				"desc": "Sets the value at the second row and column."
			},
			{
				"code": "SetValue( 'Hello', -1, -1)",
				"desc": "Sets the value at the last row and column."
			},
			{
				"code": "SetValue( 'Hello', -2, -2)",
				"desc": "Sets the value at the second to last row and column."
			}
		]
	},
	{
		"category": "Column Manipulation",
		"type": "narrative",
		"description": "\n\t\tFunctions to inspect and manipulate the columns of a Datatable.\n\t\t"
	},
	{
		"category": "Column Manipulation",
		"type": "function",
		"name": "ColumnCount()",
		"returns": [
			{
				"name": "Count",
				"type": "number",
				"desc": "The number of columns in the Datatable."
			}
		],
		"description": "\n\t\t\tGets the number of columns in the Datatable.\n\t\t\tThis number can be zero.\n\t\t\t",
		"invocations": [
			{
				"code": "ColumnCount()",
				"desc": "Gets the number of columns."
			}
		]
	},
	{
		"category": "Column Manipulation",
		"type": "function",
		"name": "DeleteColumns( Count, AtColumn )",
		"parameters": [
			{
				"name": "Count",
				"type": "number",
				"reqd": false,
				"desc": "The number of columns to delete."
			},
			{
				"name": "AtColumn",
				"type": "number",
				"reqd": false,
				"desc": "The column index to delete at."
			}
		],
		"description": "\n\t\t\tDeletes a number of columns starting at a specific column index.\n\t\t\tYou can use a negative column index to delete columns from the end.\n\t\t\t",
		"invocations": [
			{
				"code": "DeleteColumns()",
				"desc": "Delete all columns."
			},
			{
				"code": "DeleteColumns( 1 )",
				"desc": "Delete the first column."
			},
			{
				"code": "DeleteColumns( 1, 0 )",
				"desc": "Delete the first column."
			},
			{
				"code": "DeleteColumns( 3, 2 )",
				"desc": "Delete three columns starting at column index 2."
			},
			{
				"code": "DeleteColumns( 3, -1 )",
				"desc": "Delete the last three columns."
			}
		]
	},
	{
		"category": "Column Manipulation",
		"type": "function",
		"name": "ClearColumns( Count, AtColumn )",
		"parameters": [
			{
				"name": "Count",
				"type": "number",
				"reqd": false,
				"desc": "The number of columns to clear."
			},
			{
				"name": "AtColumn",
				"type": "number",
				"reqd": false,
				"desc": "The column index to clear at."
			}
		],
		"description": "\n\t\t\t\tClears a number of columns starting at a specific column index.\n\t\t\t\tYou can use a negative column index to clear columns from the end.\n\t\t\t\t",
		"invocations": [
			{
				"code": "ClearColumns()",
				"desc": "Clear all columns."
			},
			{
				"code": "ClearColumns( 1 )",
				"desc": "Clear the first column."
			},
			{
				"code": "ClearColumns( 1, 0 )",
				"desc": "Clear the first column."
			},
			{
				"code": "ClearColumns( 3, 2 )",
				"desc": "Clear three columns starting at column index 2."
			},
			{
				"code": "ClearColumns( 3, -1 )",
				"desc": "Clear the last three columns."
			}
		]
	},
	{
		"category": "Column Manipulation",
		"type": "function",
		"name": "InsertBlankColumns( Count, AtColumn )",
		"parameters": [
			{
				"name": "Count",
				"type": "number",
				"reqd": false,
				"desc": "The number of columns to insert."
			},
			{
				"name": "AtColumn",
				"type": "number",
				"reqd": false,
				"desc": "The column index to insert at."
			}
		],
		"description": "\n\t\t\t\tInserts a number of columns starting at a specific column index.\n\t\t\t\tYou can use a negative column index to insert columns to the end.\n\t\t\t\t",
		"invocations": [
			{
				"code": "InsertBlankColumns()",
				"desc": "Insert a single blank column at the beginning."
			},
			{
				"code": "InsertBlankColumns( 3 )",
				"desc": "Insert three blank columns at the beginning."
			},
			{
				"code": "InsertBlankColumns( 3, 0 )",
				"desc": "Insert three blank columns at the beginning."
			},
			{
				"code": "InsertBlankColumns( 3, 5 )",
				"desc": "Insert three blank columns at column index 5."
			},
			{
				"code": "InsertBlankColumns( 3, -1 )",
				"desc": "Insert three blank columns at the end."
			}
		]
	},
	{
		"category": "Row Manipulation",
		"type": "narrative",
		"description": "\n\t\tFunctions to inspect and manipulate the rows of a Datatable.\n\t\t"
	},
	{
		"category": "Row Manipulation",
		"type": "function",
		"name": "RowCount()",
		"returns": [
			{
				"name": "Count",
				"type": "number",
				"desc": "The number of rows in the Datatable."
			}
		],
		"description": "\n\t\t\tGets the number of rows in the Datatable.\n\t\t\tThis number can be zero.\n\t\t\t",
		"invocations": [
			{
				"code": "RowCount()",
				"desc": "Gets the number of rows."
			}
		]
	},
	{
		"category": "Row Manipulation",
		"type": "function",
		"name": "DeleteRows( Count, AtRow )",
		"parameters": [
			{
				"name": "Count",
				"type": "number",
				"reqd": false,
				"desc": "The number of rows to delete."
			},
			{
				"name": "AtRow",
				"type": "number",
				"reqd": false,
				"desc": "The row index to delete at."
			}
		],
		"description": "\n\t\t\tDeletes a number of rows starting at a specific column index.\n\t\t\tYou can use a negative row index to delete rows from the end.\n\t\t\t",
		"invocations": [
			{
				"code": "DeleteRows()",
				"desc": "Delete all rows."
			},
			{
				"code": "DeleteRows( 1 )",
				"desc": "Delete the first row."
			},
			{
				"code": "DeleteRows( 1, 0 )",
				"desc": "Delete the first row."
			},
			{
				"code": "DeleteRows( 3, 2 )",
				"desc": "Delete three rows starting at row index 2."
			},
			{
				"code": "DeleteRows( 3, -1 )",
				"desc": "Delete the last three rows."
			}
		]
	},
	{
		"category": "Row Manipulation",
		"type": "function",
		"name": "ClearRows( Count, AtRow )",
		"parameters": [
			{
				"name": "Count",
				"type": "number",
				"reqd": false,
				"desc": "The number of rows to clear."
			},
			{
				"name": "AtRow",
				"type": "number",
				"reqd": false,
				"desc": "The row index to clear at."
			}
		],
		"description": "\n\t\t\tClears a number of rows starting at a specific row index.\n\t\t\tYou can use a negative row index to clear rows from the end.\n\t\t\t",
		"invocations": [
			{
				"code": "ClearRows()",
				"desc": "Clear all rows."
			},
			{
				"code": "ClearRows( 1 )",
				"desc": "Clear the first row."
			},
			{
				"code": "ClearRows( 1, 0 )",
				"desc": "Clear the first row."
			},
			{
				"code": "ClearRows( 3, 2 )",
				"desc": "Clear three rows starting at row index 2."
			},
			{
				"code": "ClearRows( 3, -1 )",
				"desc": "Clear the last three rows."
			}
		]
	},
	{
		"category": "Row Manipulation",
		"type": "function",
		"name": "InsertBlankRows( Count, AtRow )",
		"parameters": [
			{
				"name": "Count",
				"type": "number",
				"reqd": false,
				"desc": "The number of rows to insert."
			},
			{
				"name": "AtRow",
				"type": "number",
				"reqd": false,
				"desc": "The row index to insert at."
			}
		],
		"description": "\n\t\t\tInserts a number of blank rows starting at a specific row index.\n\t\t\tYou can use a negative row index to insert rows from the end.\n\t\t\t",
		"invocations": [
			{
				"code": "InsertBlankRows()",
				"desc": "Insert a single blank row at the beginning."
			},
			{
				"code": "InsertBlankRows( 3 )",
				"desc": "Insert three rows at the beginning."
			},
			{
				"code": "InsertBlankRows( 3, 0 )",
				"desc": "Insert three rows at the beginning."
			},
			{
				"code": "InsertBlankRows( 3, 5 )",
				"desc": "Insert three rows at row index 5."
			},
			{
				"code": "InsertBlankRows( 3, -1 )",
				"desc": "Insert three rows at the end."
			}
		]
	},
	{
		"category": "Row Manipulation",
		"type": "function",
		"name": "InsertRows( Matrix, AtRow )",
		"parameters": [
			{
				"name": "Matrix",
				"type": "number",
				"reqd": true,
				"desc": "The matrix of rows to insert."
			},
			{
				"name": "AtRow",
				"type": "number",
				"reqd": false,
				"desc": "The row index to insert at."
			}
		],
		"description": "\n\t\t\tInserts a number of rows from the given matrix starting at a specific row index.\n\t\t\tYou can use a negative row index to insert rows from the end.\n\t\t\t",
		"invocations": [
			{
				"code": "InsertRows( matrix )",
				"desc": "Insert rows from matrix at the beginning."
			},
			{
				"code": "InsertRows( matrix, 0 )",
				"desc": "Insert rows from matrix at the beginning."
			},
			{
				"code": "InsertRows( matrix, 5 )",
				"desc": "Insert rows from matrix at row index 5."
			},
			{
				"code": "InsertRows( matrix, -1 )",
				"desc": "Insert rows from matrix at the end."
			},
			{
				"code": "InsertRows( matrix, -3 )",
				"desc": "Insert rows from matrix at three rows before the end."
			}
		]
	},
	{
		"category": "Datatable Creation",
		"type": "narrative",
		"description": "\n\t\tFunctions to create instances of a Datatable.\n\t\t"
	},
	{
		"category": "Datatable Creation",
		"type": "function",
		"name": "NewDatatable()",
		"returns": [
			{
				"name": "Datatable",
				"type": "object",
				"desc": "A new Datatable."
			}
		],
		"description": "\n\t\t\tCreates an empty Datatable with zero rows and zero columns.\n\t\t\t",
		"invocations": [
			{
				"code": "NewDatatable()",
				"desc": "Returns a new Datatable."
			}
		]
	},
	{
		"category": "Datatable Creation",
		"type": "function",
		"name": "NewBlankDatatable( RowCount, ColumnCount )",
		"parameters": [
			{
				"name": "RowCount",
				"type": "number",
				"reqd": true,
				"desc": "The number of rows for the new Datatable."
			},
			{
				"name": "ColumnCount",
				"type": "number",
				"reqd": true,
				"desc": "The number of columns for the new Datatable."
			}
		],
		"returns": [
			{
				"name": "Datatable",
				"type": "object",
				"desc": "A new Datatable."
			}
		],
		"description": "\n\t\t\tCreates an empty Datatable with the requested rows and columns.\n\t\t\t",
		"invocations": [
			{
				"code": "NewBlankDatatable( 10, 10 )",
				"desc": "Returns a new Datatable with 10 rows and 10 columns."
			}
		]
	},
	{
		"category": "Datatable Creation",
		"type": "function",
		"name": "FromMatrix( Matrix )",
		"parameters": [
			{
				"name": "Matrix",
				"type": "number",
				"reqd": true,
				"desc": "The matrix of values for the new Datatable."
			}
		],
		"returns": [
			{
				"name": "Datatable",
				"type": "object",
				"desc": "A new Datatable."
			}
		],
		"description": "\n\t\t\tCreates a Datatable populates with values from the given Matrix.\n\t\t\tThe Datatable will have the same number of rows and columns as Matrix.\n\t\t\t",
		"invocations": [
			{
				"code": "FromMatrix( Matrix )",
				"desc": "Returns a new Datatable with data from Matrix."
			}
		]
	}
]